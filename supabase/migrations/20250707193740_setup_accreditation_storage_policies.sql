-- supabase/migrations/xxxxxxxx_setup_accreditation_storage_policies.sql

-- ========= BUCKET CREATION =========
-- First, ensure the 'accreditation-files' bucket exists and is private.
INSERT INTO storage.buckets (id, name, public)
VALUES ('accreditation-files', 'accreditation-files', false)
ON CONFLICT (id) DO NOTHING;


-- ========= ACCREDITATION-FILES POLICIES =========
-- This section replicates the policies you've created.

-- Drop existing policies to ensure a clean slate before creating new ones.
-- The names are generated by the UI, so we use the ones you provided.
DROP POLICY IF EXISTS "Org Presidents can upload their own files 16ihgro_0" ON storage.objects;
DROP POLICY IF EXISTS "Org Presidents can upload their own files 16ihgro_1" ON storage.objects;
DROP POLICY IF EXISTS "Org Presidents can upload their own files 16ihgro_2" ON storage.objects;
DROP POLICY IF EXISTS "Org Presidents can upload their own files 16ihgro_3" ON storage.objects;

-- NOTE: The policies below are very permissive. They allow ANY authenticated user
-- to perform actions on ANY file in this bucket. The more secure versions
-- are provided in the comments for when you are ready to implement them.

-- 1. INSERT Policy
CREATE POLICY "Org Presidents can upload their own files 16ihgro_0"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'accreditation-files'
);
-- SECURE VERSION for INSERT (Only Officers):
-- WITH CHECK (
--   bucket_id = 'accreditation-files' AND
--   EXISTS (
--     SELECT 1 FROM public.orgmember
--     WHERE public.orgmember.orgid = (storage.foldername(name))[1]
--       AND public.orgmember.studentid = public.get_my_studentid(auth.uid())
--       AND public.orgmember.position IN ('President', 'Vice President', 'PRO')
--   )
-- )


-- 2. UPDATE Policy
CREATE POLICY "Org Presidents can upload their own files 16ihgro_1"
ON storage.objects FOR UPDATE
TO authenticated
USING (
  bucket_id = 'accreditation-files'
);
-- SECURE VERSION for UPDATE (Only Officers):
-- USING (
--   bucket_id = 'accreditation-files' AND
--   EXISTS (
--     SELECT 1 FROM public.orgmember
--     WHERE public.orgmember.orgid = (storage.foldername(name))[1]
--       AND public.orgmember.studentid = public.get_my_studentid(auth.uid())
--       AND public.orgmember.position IN ('President', 'Vice President', 'PRO')
--   )
-- )


-- 3. DELETE Policy
CREATE POLICY "Org Presidents can upload their own files 16ihgro_2"
ON storage.objects FOR DELETE
TO authenticated
USING (
  bucket_id = 'accreditation-files'
);
-- SECURE VERSION for DELETE (Only Officers):
-- USING (
--   bucket_id = 'accreditation-files' AND
--   EXISTS (
--     SELECT 1 FROM public.orgmember
--     WHERE public.orgmember.orgid = (storage.foldername(name))[1]
--       AND public.orgmember.studentid = public.get_my_studentid(auth.uid())
--       AND public.orgmember.position IN ('President', 'Vice President', 'PRO')
--   )
-- )


-- 4. SELECT Policy
CREATE POLICY "Org Presidents can upload their own files 16ihgro_3"
ON storage.objects FOR SELECT
TO authenticated
USING (
  bucket_id = 'accreditation-files'
);
-- SECURE VERSION for SELECT (Org Members and Admins):
-- USING (
--   bucket_id = 'accreditation-files' AND
--   (
--     -- Condition 1: User is a member of the org whose folder they are trying to access
--     EXISTS (
--       SELECT 1 FROM public.orgmember
--       WHERE public.orgmember.orgid = (storage.foldername(name))[1]
--         AND public.orgmember.studentid = public.get_my_studentid(auth.uid())
--     )
--     -- OR Condition 2: Add a check for a school admin role in the future
--     -- OR is_school_admin(auth.uid())
--   )
-- )